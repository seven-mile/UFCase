name: MSBuild

on: [push]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: ./UFCase.sln

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

jobs:
  build:
    runs-on: windows-2022
    # runs-on: windows-latest

    strategy:
      matrix:
        # Define the platforms of UFCase client. Note that the host always covers all platforms.
        platform:
        - x64
        - ARM64

    steps:
    - uses: actions/checkout@v4

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        nuget restore ./UFCase/packages.config -SolutionDirectory .
        nuget restore ./UFCase.Host/packages.config -SolutionDirectory .
        nuget restore ./UFCase.Host.Test/packages.config -SolutionDirectory .
        msbuild -t:restore ./UFCase.Host.Manifest

    - name: Build UFCase - isolation host part
      working-directory: ${{ env.GITHUB_WORKSPACE }}
      run: |
        msbuild ${{ env.SOLUTION_FILE_PATH }} /t:UFCase_Host /m /p:Configuration=${{ env.BUILD_CONFIGURATION }} /p:Platform=x64
        msbuild ${{ env.SOLUTION_FILE_PATH }} /t:UFCase_Host /m /p:Configuration=${{ env.BUILD_CONFIGURATION }} /p:Platform=ARM64

    - name: Build UFCase - client part
      working-directory: ${{ env.GITHUB_WORKSPACE }}
      run: msbuild ${{ env.SOLUTION_FILE_PATH }} /m /p:Configuration=${{ env.BUILD_CONFIGURATION }} /p:Platform=${{ matrix.platform }}

    # Collect the outputs into one folder for packaging
    - name: Collect output files
      shell: bash
      working-directory: ${{ matrix.platform }}/${{ env.BUILD_CONFIGURATION }}
      run: |
        mkdir -p ./Artifact
        cp -r ./UFCase/Assets ./Artifact
        cp ./UFCase/Microsoft.WindowsAppRuntime.Bootstrap.dll ./Artifact
        cp ./UFCase/UFCase.exe ./Artifact
        cp ./UFCase/UFCase.pri ./Artifact
        cp ./UFCase/UFCase.ProxyStub.x86.dll ./Artifact
        cp ./UFCase/UFCase.ProxyStub.amd64.dll ./Artifact
        cp ./UFCase/UFCase.ProxyStub.arm32.dll ./Artifact
        cp ./UFCase/UFCase.ProxyStub.arm64.dll ./Artifact
        cp ./UFCase/UFCase.Host.x86.exe ./Artifact
        cp ./UFCase/UFCase.Host.amd64.exe ./Artifact
        cp ./UFCase/UFCase.Host.arm32.exe ./Artifact
        cp ./UFCase/UFCase.Host.arm64.exe ./Artifact
        cp ./UFCase/UFCase.Host.Manifest.dll ./Artifact
        cp ./UFCase/WinRT.Host.x86.dll ./Artifact
        cp ./UFCase/WinRT.Host.amd64.dll ./Artifact
        cp ./UFCase/WinRT.Host.arm64.dll ./Artifact
        cp ./UFCase/WinRT.Host.x86.runtimeconfig.json ./Artifact
        cp ./UFCase/WinRT.Host.amd64.runtimeconfig.json ./Artifact
        cp ./UFCase/WinRT.Host.arm64.runtimeconfig.json ./Artifact
        cp ./UFCase/WinRT.Host.Shim.dll ./Artifact
        cp ./UFCase/WinRT.Runtime.dll ./Artifact

    # Upload the application package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload UFCase package
      uses: actions/upload-artifact@v4
      with:
        name: UFCase_portable_${{ matrix.platform }}_${{ github.sha }}
        path: |
          ${{ matrix.platform }}/${{ env.BUILD_CONFIGURATION }}/Artifact
